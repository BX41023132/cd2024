var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:\xa0 https://bx41023132.github.io/cd2024/ \n 網誌:\xa0 https://bx41023132.github.io/cd2024/blog \n 簡報:  https://bx41023132.github.io/cd2024/reveal \n 倉儲:\xa0 https://github.com/BX41023132/cd2024 \n 2b 分組倉儲 classroom invitation : https://classroom.github.com/a/KJjlY-0 \n midbg8倉儲: https://github.com/mdecd2024/2b-midbg8 \n 分組網站: https://mdecd2024.github.io/2b-midbg8/ \n', 'tags': '', 'url': 'About.html'}, {'title': 'Class content', 'text': '', 'tags': '', 'url': 'Class content.html'}, {'title': 'W1-0222:本學期上課內容講解、建立編輯個人倉儲、網站架設。', 'text': '上課內容講解 \n 課程目標: \n \n 讓學員了解如何利用 Web-based 環境( Github 、 Onshape )、近端套件( CoppeliaSim ) 以及 \xa0 Odoo PLM \xa0 系統進行協同產品設計, \xa0 https://national-formosa-university.odoo.com . \n 讓學員了解如何利用 \xa0 Replit 、 Codespaces \xa0 與 localhost 維護協同網站內容 \n \n \n 課程評分: \n 學員每週編寫網誌內容佔 40% \n 每週上課內容摘要與分組報告執行分工及進度整理 \n 相關資料收集與閱讀心得 \n 分組期中報告 ( LaTeX \xa0 -> pdf) 與簡報影片 ( OBS \xa0 -> mp4) 佔 20% \n 每組至多 8 人, 期中報告題目:\xa0 ODOO PLM \xa0 在協同產品設計上的應用 - 以 鋼球平衡台機電控制系統設計 為例 \n ball_beam_balancing_PID_control_coppeliasim.7z \n ball_beam_balancing_PID_control_coppeliasim_1d_and_2d.7z \n 分組期末報告 ( LaTeX \xa0 -> pdf) 與簡報影片 ( OBS \xa0 -> mp4) 佔 40% \n 期末報告題目: \xa0 網際綜合球類競賽機器人協同設計與模擬 \n (競技場景中必須納入數位計時器與類比記分機構 \n 每場競技時間為 10 分鐘 \n 每隊球員機器人依照各組人數平均分為兩隊 \n 每位機器人球員必須同時具備踢球、取球與投球機構 \n 雙方陣營各有足球門與籃球框各一具 \n 球場中由裁判程式於開場時, 在球場正中央落下 10 球 \n 將球踢進對方球門者得 1 分, 將球投入對方籃框者得 5 分) \n \n \n 建立個人倉儲 \n 登入 github.com, 連結到 \xa0 https://github.com/mdecycu/cmsimde_site , 利用此倉儲作為 Template, 新增一個名稱為 cd2024 的倉儲, 並且將其 main 分支設為網頁根目錄. \n https://github.com/mdecycu/cmsimde_site \xa0 與 \xa0 https://github.com/mdecycu/cmsite \xa0 的差別為, 目前的 Template 將 cmsimde 當作目錄, 而非 cmsite 中的子模組. \n \n \n', 'tags': '', 'url': 'W1-0222:本學期上課內容講解、建立編輯個人倉儲、網站架設。.html'}, {'title': 'W2-0229:分組分工、加入Classroom、建立分組倉儲。', 'text': '建立分組倉儲 \n 由於各分組網站從 Github Classroom 執行配置, 因此該倉儲位於 mdecd2024 帳號下, 雖然各組組員具備對此分組倉儲改版的權限, 但是若將分組倉儲 import 到 Replit, 因為其倉儲擁有者為 mdecd2024, 因此無法從 Replit accoount 項下進行授權, 但是可以利用 ssh-keygen 建立 .ssh 目錄下的 id_rsa 與 id_rsa.pub, 之後除了將公鑰送到 Github 之外, 還需要在 .ssh 目錄中建立 config, 且將倉儲 .git/config 中的 https 協定改為 SSH. \n 根據上述流程, 可以在 Replit 中以 SSH 模式取得對 Github 帳號下特定倉儲的改版全縣, 只不過 Replit 的免費帳號環境會不定時刪除 /home/runner/.ssh 目錄中的授權資料, 因此若要使用 Replit 維護從 Github Classroom 取得授權的分組倉儲, 必須使用程式方法配置 .ssh 中的 id_rsa 與 config 檔案. \n 2b-midbg8倉儲: \n midbg8倉儲: https://github.com/mdecd2024/2b-midbg8 \n 分組網站: https://mdecd2024.github.io/2b-midbg8/ \n \n', 'tags': '', 'url': 'W2-0229:分組分工、加入Classroom、建立分組倉儲。.html'}, {'title': 'W3-0307:個人倉儲設為分組倉儲之子模組', 'text': '將組員的個人倉儲設為分組倉儲子模組 \n 以 submodule 的方式納入各分組倉儲與網站, 設定的指令為: \n git submodule add 組員的個人倉儲網址 組員的學號 \n 例如: 假設組員的 cd2024 個人倉儲位於: https://github.com/scrum-1/cd2024, 且該組員的學號為 41123299, 則該組員必須在進入該組的倉儲目錄後, 執行: \n git submodule add https://github.com/scrum-1/cd2024.git 41123299 \n 如此, Github 帳號為 scrum-1 的組員, 其個人倉儲就會設定為分組倉儲的子模組, 而且是以其學號命名此一子模組的目錄名稱. 這樣設定的好處是: 各組員可以自行管理個人的課程倉儲與網站, 也就是位於其 Github 帳號下的 cd2024, 並且自行決定要整合到分組倉儲與網站的版本. 也能將自己在課程網站的資料, 直接用連結導入分組網站, 無需額外將資料搬進分組倉儲. \n 另外一個使用 Github Classroom 派送分組倉儲的好處, 是 mdecycu 自動成為各分組倉儲的管理者之一, 若各組在改版或解決衝突的過程發生問題, mdecycu 可以協助處理. \n 一旦分組倉儲帶有以各組員學號作為子模組之後, git clone 倉儲必須使用: \n git clone --recurse-submodules 加上各組的倉儲 URL \n 以第一組期中分組倉儲的 git clone 為例, 並且使用 putty session 名稱 github.com: \n git clone --recurse-submodules git@github.com:mdecd2024/2b-midbg1.git \n 而且若要在分組倉儲中更新各組員的子模組版本, 則必須更換目錄到該組員的學號目錄中並且使用 git pull origin main, 才能取下該組員其 cd2024 個人倉儲的最新內容. 取下組員資料後, 若要新增提交推送, 則必須再更換目錄回分組倉儲後才能執行. \n \n \n', 'tags': '', 'url': 'W3-0307:個人倉儲設為分組倉儲之子模組.html'}, {'title': 'W4-0314:翻議論文、git branch', 'text': '\n 翻譯工作分配 \n 41023132:P1-44 \n /downloads/41023132-P1-44.pdf \n 41039138:P45-87 \n', 'tags': '', 'url': 'W4-0314:翻議論文、git branch.html'}, {'title': 'W5-0321:影片整理(字幕)、分組網誌的統整、NX 零組件繪圖', 'text': '工作分配 \n 41023132影片1-7 \n 41039138影片8-14 \n \n', 'tags': '', 'url': 'W5-0321:影片整理(字幕)、分組網誌的統整、NX 零組件繪圖.html'}, {'title': 'W6-0328:說明協同 NX 零組件繪圖、 CoppeliaSim 場景模擬相關檔案格式', 'text': 'ODOO PLM 論文中英並列任務 \n 由各組員在其個人的 cd2024 倉儲中, 以 LaTeX 格式分工完成下列文章的英文與中文翻譯並列資料, 最後在分組網站的 Release 或 downloads 區完成 2b-midbgx_report.pdf 的製作. \n 若要在近端使用可攜程式環境編譯分組 LaTeX 報告, 請下載 \xa0 miktex-portable.7z \xa0 (需要密碼, 下載 167MB, 解開壓縮檔案後約 1GB) 以及參考資料: \xa0 latex_images_github.7z \xa0 (需要密碼) \n 2021 ANALYSIS OF THE ODOO SOFTWARE CAPABILITIES REGARDING PRODUCT LIFECYCLE MANAGEMENT, MANUFACTURING EXECUTION SYSTEMS AND THEIR INTEGRATION.pdf \xa0 or \xa0 local \xa0 download (password required) (Odoo 軟體在產品生命週期管理、製造執行系統及其整合上的功能分析) \n 英文單字查詢: \xa0 2021_odoo_reading.html \n 教學影片分組整理並自評 \n 請各組自行搜尋前面已經發布的教學影片, 分別 \n \n 在影片上填上字幕, 另行上傳到可以嵌入到各分組的網站上 \n 從影片字幕中整理出逐字稿, 放在影片下方, 以 .txt 連結安排 \n 並在各嵌入的教學影片下方, 以摘要方式說明該影片的教學重點 \n \n \n W9-0418: 介紹 Google AIStudio 與 Claude.io \n https://aistudio.google.com/ \n https://claude.ai/ \n \n \n', 'tags': '', 'url': 'W6-0328:說明協同 NX 零組件繪圖、 CoppeliaSim 場景模擬相關檔案格式.html'}, {'title': 'Group', 'text': '', 'tags': '', 'url': 'Group.html'}, {'title': '分組名單', 'text': '41039138凃家豐 \n 41023132林秉賢: 翻譯P1-44 \n /downloads/41023132-P1-44.pdf \n', 'tags': '', 'url': '分組名單.html'}, {'title': 'W5-HW', 'text': '1 \n \n \n /downloads/1建個人課程倉儲與網頁.txt \n 2 \n \n /downloads/2如何從 Replit Account 設定 Connect 連結到 Github.txt \n 3 \n \n \n /downloads/3如何設定 Github 帳號的雙重認證.txt \n 4-1 \n \n 4-2 \n \n /downloads/4說明如何將倉儲 import 至 Replit 改版後推回 github.txt \n 5-1 \n \n 5-2 \n \n /downloads/5第一組組長建立 Team 並設定分組倉儲.txt \n 6 \n \n \xa0 \n /downloads/6從第一組空倉儲建立 cmsimde_site 內容.txt \n 7 \n \n \n /downloads/7利用 codespaces 維護分組網站.txt \n \n \n', 'tags': '', 'url': 'W5-HW.html'}, {'title': '期中自評影片', 'text': '\n \n', 'tags': '', 'url': '期中自評影片.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};